"""
문1) 다음 'final_texts.txt' 파일을 대상으로 아래와 같은 조건과 
    <출력결과>를 참고하여 문서단어행렬(DTM)을 만드시오.    

 <조건1> 단어 가중치 방법 : TFiDF  
 <조건2> max features = 10   
 
 <출력결과>
 [[0.         0.         0.39114171 0.         0.48481007 0.
   0.         0.         0.         0.78228342]
  [0.70710678 0.         0.         0.         0.         0.
   0.         0.70710678 0.         0.        ]
  [0.         0.4695148  0.4695148  0.         0.         0.
   0.         0.         0.5819515  0.4695148 ]
  [0.         0.         0.         0.57735027 0.         0.57735027
   0.57735027 0.         0.         0.        ]
  [0.         1.         0.         0.         0.         0.
   0.         0.         0.         0.        ]]   
"""

from sklearn.feature_extraction.text import TfidfVectorizer

# 1. 파일 읽기 
path = r'C:\ITWILL\3_TextMining\data'
file = open(file=path + '/final_texts.txt', mode='r')
texts = file.readlines()    
file.close()

# 2. 단어 생성기 
tfidf = TfidfVectorizer(max_features=10)
dir(tfidf)
'''
fit
fit_transform() : 원문 반영 & 변형(DTM)
'''


# 3. 문서단어행렬(dtm)
dtm = tfidf.fit_transform(texts)
print(dtm)
'''
  (0, 9)	0.7822834245989071   - 문장1, '우리나라'(TF=2)
  (0, 2)	0.39114171229945355
  (0, 4)	0.48481007054026604
  (1, 7)	0.7071067811865475
  (1, 0)	0.7071067811865475
  (2, 9)	0.46951480421464364  - 문장3, '우리나라'
  (2, 2)	0.46951480421464364
  (2, 1)	0.46951480421464364
  (2, 8)	0.5819514978671799
  (3, 6)	0.5773502691896258
  (3, 5)	0.5773502691896258
  (3, 3)	0.5773502691896258
  (4, 1)	1.0
'''

# 문장1, '우리나라'
TF = 2
DF = 3 
iDF = 1/DF

# TFiDF
TF * iDF  # 0.6666666666666666

# 문장3, '우리나라'
TF = 1 
TF * iDF  # 0.3333333333333333

'''
TFiDF 가중치 적용 방식 :
TF : 한 문장에서 특정 단어가 얼마나 자주 등장하는지 나타내는 값
IDF : 단어가 전체 문서 중 몇 문서에 등장하는지 반영
-> 모든 문서에 다 나오는 단어는 점수를 낮게, "특정 문서에만 등장하는 단어는 점수를 높게"
    해서 문서의 "특징적인 단어" 를 강조한느 방식.
'''


# 4. numpy 배열 변환  
dtm_arr = dtm.toarray()

print(dtm_arr)
'''
[[0.         0.         0.39114171 0.         0.48481007 0.
  0.         0.         0.         0.78228342]
 [0.70710678 0.         0.         0.         0.         0.
  0.         0.70710678 0.         0.        ]
 [0.         0.4695148  0.4695148  0.         0.         0.
  0.         0.         0.5819515  0.4695148 ]
 [0.         0.         0.         0.57735027 0.         0.57735027
  0.57735027 0.         0.         0.        ]
 [0.         1.         0.         0.         0.         0.
  0.         0.         0.         0.        ]]
'''

type(dtm_arr) # # numpy.ndarray
dtm_arr.shape  # (5, 10)
